{% extends 'banner.html.twig' %}
{% block content %}

    <br>
    <div class="d-flex justify-content-sm-center">
        <div class="alert alert-success" role="alert">
            <h4 class="alert-heading">Well done! You're secure.</h4>
            <p>Error:
                <h7>Check your account balance.</h7>
            </p>
            <hr class="my-4">

            <button class="btn btn-success" type="button" data-toggle="collapse" data-target="#collapseExample"
                    aria-expanded="false" aria-controls="collapseExample">
                Explanation
            </button>
            </p>
            <div class="collapse" id="collapseExample">
                <b>Malicious http POST request</b>
                <div class="text-left"><pre class="prettyprint">
&ltform action="" method={{ method }}>

    &ltinput type="hidden" name="balance" id="balance" value="15" />
    &ltinput type="hidden" name="Account" id="Account" value="20820112" />
    &ltinput type="hidden" name="SortCode" id="SortCode" value="203948" />

    &ltbutton type="submit" class="btn btn-primary" value="">Click here to simulate malicious payload&lt/button>

&lt/form></pre>
                </div>
                <b>Valid http POST request</b>
                <div class="text-left"><pre class="prettyprint">
&ltform action="" method={{ method }}>

    &ltinput type="hidden" name="balance" id="balance" value="15" />
    &ltinput type="hidden" name="Account" id="Account" value="20820112" />
    &ltinput type="hidden" name="SortCode" id="SortCode" value="203948" />
    <b>&ltinput type="hidden" name="token" id="token" value="#uniqueToken" /></b>

    &ltbutton type="submit" class="btn btn-primary" value="">Click here to simulate malicious payload&lt/button>

&lt/form></pre>
                </div>

                <p class="font-italic">Do you see the difference?</p>
                <hr class="my-4">


            </div>

            <button class="btn btn-success" type="button" data-toggle="collapse" data-target="#collapseExample1"
                    aria-expanded="false" aria-controls="collapseExample1">
                Explanation of the differences
            </button>
            </p>
            <div class="collapse" id="collapseExample1">

                <div class="card bg-light mb-3" style="max-width: 65rem;">
                    <div class="card-header">The web application can differentiate between a valid request generated by
                        a user and a malicious request generated by a user without their knowledge and consent.
                    </div>
                    <div class="card-body">
                        <h5 class="card-title">CSRF prevention via secure token</h5>
                        <p class="card-text">


                            1. The web application utilizes the random token generator function. <br>
                            Your own POST request token 'x' = {{ token }}
                        <hr class="my-4">
                        2. While a user is clicking the
                        <button type="submit" class="btn btn-primary" value="Submit">Transfer</button>
                        button the new token 'x' is generated.<br>
                        <hr class="my-4">
                        3. Token 'x' is saved as a session variable on the server side. At the same time, the token 'x'
                        is sent along with the valid POST request.<br>
                        <div class="text-left"><pre class="prettyprint">
$secure_token = token($app);
$_SESSION['token'] = $secure_token;</pre>
                        </div>
                        <hr class="my-4">
                        4. Once the POST request is received, the server-side function compares the arriving token from
                        http POST request with the stored token from session variable.<br>
                        <div class="text-left"><pre class="prettyprint">
function tokenCheck($app, $http_request_token, $session_variable_token)
{
if ($http_request_token !== $session_variable_token) {
$outcome = false;
} else {
$outcome = true;
}

return $outcome;
}</pre>
                        </div>
                        <hr class="my-4">
                        5. <b>If tokens match</b> -> server-side operation is performed. <b>If tokens don't match </b>->
                        the operation is aborted.
                        <div class="text-left"><pre class="prettyprint">
$do_tokens_match = tokenCheck($app, $postRequestToken, $_SESSION['token']);

if($do_tokens_match !== true) {
//abort the operation
} else {
//perform the operation
}</pre>
                        </div>


                        </p>
                    </div>
                </div>

                <b>The web application can differentiate between a valid request generated by user and a malicious
                    request generated by a user without their knowledge and consent.</b><br>
                <hr class="my-4">

                1. The web application utilizes the random token generator function. <br>
                <hr class="my-4">
                2. While user is clicking the
                <button type="submit" class="btn btn-primary" value="Submit">Transfer</button>
                button the new token 'x' is generated.<br>
                <hr class="my-4">
                3. Token 'x' is saved as a session variable on the server side. At the same time, the token 'x' is sent
                along with the valid POST request.<br>
                <div class="text-left"><pre class="prettyprint">
$secure_token = token($app);
$_SESSION['token'] = $secure_token;</pre>
                </div>
                <hr class="my-4">
                4. Once the POST request is received, the server-side function compares the arriving token (from http
                POST request) with the stored token (from session variable).<br>
                <div class="text-left"><pre class="prettyprint">
function tokenCheck($app, $http_request_token, $session_variable_token)
{
if ($http_request_token !== $session_variable_token) {
$outcome = false;
} else {
$outcome = true;
}

return $outcome;
}</pre>
                </div>
                <hr class="my-4">
                5. <b>If tokens match</b> -> server-side operation is performed. <b>If tokens don't match </b>->
                operation is aborted.
                <div class="text-left"><pre class="prettyprint">
$do_tokens_match = tokenCheck($app, $postRequestToken, $_SESSION['token']);

if($do_tokens_match !== true) {
//abort the operation
} else {
//perform the operation
}</pre>
                </div>
                <hr class="my-4">
            </div>

            <button class="btn btn-success" type="button" data-toggle="collapse" data-target="#collapseExample2"
                    aria-expanded="false" aria-controls="collapseExample2">
                Real world scenario
            </button>
            </p>
            <div class="collapse" id="collapseExample2">
                <div class="card bg-light mb-3" style="max-width: 18rem;">
                    <div class="card-header">Header</div>
                    <div class="card-body">
                        <h5 class="card-title">Light card title</h5>
                        <p class="card-text">Some quick example text to build on the card title and make up the bulk of
                            the card's content.</p>
                    </div>
                </div>

                The malicious POST request has been send. <br>
                In real word scenario the malicious actor would likely send you a phishing email similar to the one
                below:


            </div>

            <form action="{{ action }}" method={{ method }}>
                <button type="submit" class="btn btn-success" value="Sign in again">Go back</button>
            </form>
        </div>
    </div>

{% endblock %}
